import urllib.parse
from typing import List, Dict, Any
import yaml


def generate_yaml_for_hiddify(configs: List[str], logo_name: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π YAML-–ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è Hiddify
    —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã, —ç–º–æ–¥–∑–∏ –∏ –≥—Ä—É–ø–ø —Å–µ—Ä–≤–µ—Ä–æ–≤.
    """
    proxies = []
    proxy_groups = []

    for i, uri in enumerate(configs):
        try:
            parsed = urllib.parse.urlparse(uri)
            # –†–∞—Å–∫–æ–¥–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Hiddify
            proxy_name = urllib.parse.unquote(parsed.fragment) or f"Server-{i + 1}"

            query_params = urllib.parse.parse_qs(parsed.query)
            proxy: Dict[str, Any] = {
                "name": proxy_name,
                "type": "vless",
                "server": parsed.hostname,
                "port": parsed.port,
                "uuid": parsed.username,
                "network": query_params.get("type", [""])[0],
                "tls": query_params.get("security", [""])[0] == "tls",
                "udp": True,
                "client-fingerprint": query_params.get("fp", [""])[0],
                "flow": query_params.get("flow", [""])[0]
            }
            if alpn := query_params.get("alpn", [""])[0]:
                proxy["alpn"] = [a.strip() for a in alpn.split(",")]
            proxies.append(proxy)
        except Exception as e:
            print(f"Error parsing Hiddify config from URI: {uri}, error: {e}")
            continue

    if proxies:
        all_proxy_names = [p["name"] for p in proxies]
        proxy_groups.extend([
            {"name": "Auto ‚ö°Ô∏è", "type": "url-test", "proxies": all_proxy_names,
             "url": "http://www.gstatic.com/generate_204", "interval": 300},
            {"name": "Select-Server", "type": "select", "proxies": ["Auto ‚ö°Ô∏è"] + all_proxy_names}
        ])

    config = {
        # 'name' –≤ —Ç–µ–ª–µ –¥—É–±–ª–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –µ–≥–æ, –∞ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        "name": f"üöÄ {logo_name}",
        "proxies": proxies,
        "proxy-groups": proxy_groups,
        "rules": ["MATCH,Auto ‚ö°Ô∏è"]
    }

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    standard_fields = "port: 7890\nsocks-port: 7891\nallow-lan: false\nmode: rule\nlog-level: info\n"
    yaml_config = yaml.dump(config, allow_unicode=True, sort_keys=False)

    return standard_fields + yaml_config