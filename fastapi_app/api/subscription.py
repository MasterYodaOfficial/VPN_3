import base64
from fastapi import APIRouter, Depends, HTTPException, Response, Query
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Literal

from database.session import get_db_session
from database.models import Subscription
from database.crud.crud_subscription import get_subscription_with_configs_by_service_name
from fastapi_app.services.generator_subscriptions import generate_yaml_for_hiddify
from core.config import settings

router = APIRouter()


@router.get("/{sub_name}")
async def get_subscription(
        sub_name: str,
        session: AsyncSession = Depends(get_db_session),
        # –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'hiddify'
        client: Literal['hiddify', 'happ'] = Query('hiddify')
):
    subscription: Subscription = await get_subscription_with_configs_by_service_name(session, sub_name)
    if not subscription or not subscription.is_active:
        raise HTTPException(status_code=404, detail="Subscription not found")

    configs_list = [conf.config_data for conf in subscription.configs]
    if not configs_list:
        raise HTTPException(status_code=404, detail="No active configs found")

    # --- –ì–û–¢–û–í–ò–ú –ú–ï–¢–ê–î–ê–ù–ù–´–ï –í –ó–ê–ì–û–õ–û–í–ö–ê–• (–û–ù–ò –û–ë–©–ò–ï –î–õ–Ø –û–ë–û–ò–• –ö–õ–ò–ï–ù–¢–û–í) ---
    profile_title_raw = f"üöÄ {settings.LOGO_NAME}"
    profile_title_b64 = base64.b64encode(profile_title_raw.encode('utf-8')).decode('utf-8')

    headers = {
        'profile-title': f"base64:{profile_title_b64}",
        'subscription-userinfo': f'upload=0; download=0; total=109951162777600; expire={int(subscription.end_date.timestamp())}',
        'support-url': settings.SUPPORT_URL,
        'profile-update-interval': '24'
    }

    # --- –í–´–ë–ò–†–ê–ï–ú –¢–ï–õ–û –û–¢–í–ï–¢–ê –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –ö–õ–ò–ï–ù–¢–ê ---

    if client == 'happ':
        # –î–ª—è Happ –æ—Ç–¥–∞–µ–º –ü–†–û–°–¢–û–ô –°–ü–ò–°–û–ö VLESS-–°–°–´–õ–û–ö, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        content_body = "\n".join(configs_list)
        media_type = "text/plain; charset=utf-8"
    else:  # client == 'hiddify'
        # –î–ª—è Hiddify –æ—Ç–¥–∞–µ–º –ü–û–õ–ù–û–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô YAML
        content_body = generate_yaml_for_hiddify(configs_list, settings.LOGO_NAME)
        media_type = "text/yaml; charset=utf-8"

    return Response(
        content=content_body,
        media_type=media_type,
        headers=headers
    )