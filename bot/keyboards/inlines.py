from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from core.config import settings
from database.models import Subscription, Tariff
from typing import List
from database.crud.crud_tariff import get_active_tariffs



def get_config_webapp_button(webapp_url: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
    buttons = [
        [InlineKeyboardButton(text="üì≤ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", web_app=WebAppInfo(url=webapp_url))]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def profile_buttons(active_subscriptions_count: int, has_trial: bool) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∞–π–ª"""
    kb = InlineKeyboardBuilder()
    if has_trial:
        kb.button(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="profile:trial")
    kb.button(text="‚ûï –ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data="profile:new_sub")
    if active_subscriptions_count > 0:
        kb.button(text="üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="profile:extend")
        kb.button(text="‚öôÔ∏è –ü–æ–ª—É—á–∏—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data="profile:get_conf")
    kb.adjust(1)
    return kb.as_markup()

def referral_share_button(referral_code: str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π"""
    kb = InlineKeyboardBuilder()

    link = f"https://t.me/{settings.BOT_NAME}?start={referral_code}"
    share_url = f"https://t.me/share/url?url={link}&text=üöÄ –ü–æ–ø—Ä–æ–±—É–π QuickVPN ‚Äî –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN. –ü–æ–¥–∫–ª—é—á–∏ –∑–∞ 2 –º–∏–Ω—É—Ç—ã!"

    kb.button(text="üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=share_url)
    kb.adjust(1)
    return kb.as_markup()

def active_subscriptions_buttons(sub_list: List[Subscription]) -> InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    kb = InlineKeyboardBuilder()
    for sub in sub_list:
        server_name = sub.service_name
        expires = sub.end_date.strftime("%d.%m.%y")
        label = f"üõ°Ô∏è {server_name} ‚Ä¢ –¥–æ {expires}"
        kb.button(
            text=label,
            callback_data=f"renew:{sub.id}"
        )
    kb.adjust(1)
    return kb.as_markup()

def payments_buttons() -> InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–≥—Ä—É–∂–∞—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å .env"""
    kb = InlineKeyboardBuilder()
    if settings.YOOKASSA_TOKEN:
        kb.button(text="üí∏ –û–ø–ª–∞—Ç–∞ –ÆKassa", callback_data="pay:yookassa")
    if settings.CRYPTO_TOKEN:
        kb.button(text="üßæ –ö—Ä–∏–ø—Ç–æ-–æ–ø–ª–∞—Ç–∞", callback_data="pay:crypto")
    kb.adjust(1)
    return kb.as_markup()

def tariff_buttons(tariffs: List[Tariff]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for tariff in tariffs:
        button_text = f"{tariff.name} ‚Äî {tariff.price}‚ÇΩ"
        kb.button(
            text=button_text,
            callback_data=f"choose_tariff:{tariff.id}"
        )
    kb.adjust(1)
    return kb.as_markup()

def make_pay_link_button(url: str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç–∏—Ç—å"""
    kb = InlineKeyboardBuilder()
    kb.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)
    return kb.as_markup()

def tariff_buttons_buy(tariffs: List[Tariff]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for tariff in tariffs:
        button_text = f"{tariff.name} ‚Äî {tariff.price}‚ÇΩ"
        kb.button(
            text=button_text,
            callback_data=f"buy_tariff:{tariff.id}"
        )
    kb.adjust(1)
    return kb.as_markup()

def help_menu_buttons() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é /help."""
    kb = InlineKeyboardBuilder()
    kb.button(text="üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", callback_data="help:install")
    kb.button(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)", callback_data="help:faq")
    kb.button(text="üó£Ô∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url=f"https://t.me/{settings.SUPPORT_NAME}")
    kb.adjust(1)
    return kb.as_markup()

def install_menu_buttons() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."""
    kb = InlineKeyboardBuilder()
    kb.button(text="ü§ñ Android", callback_data="install:android")
    kb.button(text="üçè iOS", callback_data="install:ios")
    kb.button(text="üíª Windows / macOS", callback_data="install:desktop")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏", callback_data="install:back_to_help")
    kb.adjust(1)
    return kb.as_markup()

def extend_subscription_button() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞, –≤–µ–¥—É—â–∞—è –≤ –º–µ–Ω—é –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    kb = InlineKeyboardBuilder()
    kb.button(text="üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="profile:extend")
    return kb.as_markup()