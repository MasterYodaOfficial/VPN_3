from aiogram.types import Message, CallbackQuery
from aiogram import Bot
from aiogram.fsm.context import FSMContext

from bot.database.crud.crud_user import is_admin, get_all_telegram_ids

from bot.utils.messages import broadcast_message
from bot.utils.statesforms import StepForm
from bot.keyboards.inlines import continue_broadcast_buttons

import asyncio
from bot.logger import logger

async def send_broadcast(bot: Bot, original_message: Message, user_ids: list[int], admin_id: int):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    success, failed = 0, 0

    for user_id in user_ids:
        try:
            await original_message.send_copy(chat_id=user_id)
            success += 1
            await asyncio.sleep(0.05)  # –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å Flood
        except Exception as e:
            failed += 1
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")
            if "Too Many Requests" in str(e):
                await asyncio.sleep(1.5)
            else:
                await asyncio.sleep(0.05)

    text = (
        "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        f"üë• –í—Å–µ–≥–æ: {len(user_ids)}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(admin_id, text)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –∞–¥–º–∏–Ω—É: {e}")


async def broadcast_command(message: Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    logger.info(f"{message.from_user.id}, {message.from_user.first_name}")
    if await is_admin(message.from_user):
        await message.answer(broadcast_message)
        await state.set_state(StepForm.WAITING_BROADCAST_MESSAGE)


async def receive_broadcast_message(message: Message, state: FSMContext):
    """–ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    logger.info(f"{message.from_user.id}, {message.from_user.first_name}")
    await state.update_data(broadcast_message=message)
    await message.reply(
        text="‚úÖ –ü–æ–ª—É—á–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.",
        reply_markup=continue_broadcast_buttons()
    )
    await state.set_state(StepForm.CONFIRM_BROADCAST)


async def confirm_broadcast(call: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    """

    if call.data.startswith("broadcast"):
        _, answer = call.data.split(":")
        if answer == "start":
            data = await state.get_data()
            original_message: Message = data.get("broadcast_message")
            if not original_message:
                await call.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
                await state.clear()
                return

            user_ids = await get_all_telegram_ids()
            admin_id = call.from_user.id

            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            await asyncio.create_task(send_broadcast(call.bot, original_message, user_ids, admin_id))

            await call.message.edit_text("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –û—Ç—á—ë—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            await state.clear()
        else:
            await call.message.answer("–û—Ç–º–µ–Ω–∏–ª.")
            await call.message.delete()
            await state.clear()
            return