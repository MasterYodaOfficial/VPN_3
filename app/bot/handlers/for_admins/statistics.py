from aiogram.types import Message, CallbackQuery
from datetime import datetime
from app.bot.utils.admin_messages import admin_panel_start_message
from app.bot.keyboards.inlines import admin_panel_buttons, back_to_admin_panel_button
from app.services.user_service import register_user_service
from database.session import get_session
from database.crud import crud_user, crud_payment, crud_subscription, crud_server


async def admin_command(message: Message):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. /admin"""
    user_db = await register_user_service(message)
    if not user_db.is_admin:
        return

    await message.answer(admin_panel_start_message, reply_markup=admin_panel_buttons())


async def navigate_admin_panel(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–∞–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    action = call.data.split(":")[1]

    async with get_session() as session:
        if action == "back":
            await call.message.edit_text(admin_panel_start_message, reply_markup=admin_panel_buttons())
            return

        # --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ---
        if action == "general":
            total_users = await crud_user.count_users(session)
            new_users_today = await crud_user.count_new_users_for_period(session, days=1)
            new_users_month = await crud_user.count_new_users_for_period(session, days=30)
            active_subs = await crud_subscription.count_active_subscriptions(session)
            revenue_today = await crud_payment.get_revenue_for_period(session, days=1)
            revenue_month = await crud_payment.get_revenue_for_period(session, days=30)

            text = (
                f"<b>üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}</b>\n\n"
                f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
                f"  - –í—Å–µ–≥–æ: <code>{total_users}</code>\n"
                f"  - –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <code>{new_users_today}</code>\n"
                f"  - –ù–æ–≤—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: <code>{new_users_month}</code>\n\n"
                f"<b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
                f"  - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: <code>{active_subs}</code>\n\n"
                f"<b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
                f"  - –î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: <code>{revenue_today} ‚ÇΩ</code>\n"
                f"  - –î–æ—Ö–æ–¥ –∑–∞ 30 –¥–Ω–µ–π: <code>{revenue_month} ‚ÇΩ</code>"
            )

        elif action == "finance":
            revenue_today = await crud_payment.get_revenue_for_period(session, days=1)
            revenue_week = await crud_payment.get_revenue_for_period(session, days=7)
            revenue_month = await crud_payment.get_revenue_for_period(session, days=30)
            revenue_total = await crud_payment.get_revenue_for_period(session)

            text = (
                f"<b>üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º</b>\n\n"
                f"  - –î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: <code>{revenue_today} ‚ÇΩ</code>\n"
                f"  - –î–æ—Ö–æ–¥ –∑–∞ 7 –¥–Ω–µ–π: <code>{revenue_week} ‚ÇΩ</code>\n"
                f"  - –î–æ—Ö–æ–¥ –∑–∞ 30 –¥–Ω–µ–π: <code>{revenue_month} ‚ÇΩ</code>\n"
                f"  - –î–æ—Ö–æ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <code>{revenue_total} ‚ÇΩ</code>"
            )

        elif action == "servers":
            servers = await crud_server.get_all_servers_with_load(session)
            server_lines = []
            for server in servers:
                status_icon = "‚úÖ" if server.is_active else "‚ùå"
                load_percent = (server.current_clients / server.max_clients * 100) if server.max_clients else 0
                server_lines.append(
                    f"  - {status_icon} <b>{server.name}</b>: <code>{server.current_clients}/{server.max_clients}</code> ({load_percent:.1f}%)"
                )

            text = "<b>üñ•Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤</b>\n\n" + "\n".join(server_lines)

        elif action == "referrals":
            top_referrers = await crud_user.get_top_referrers(session, limit=5)
            referrer_lines = []
            for i, user in enumerate(top_referrers):
                referrer_lines.append(
                    f"  {i + 1}. <code>{user.telegram_id}</code> ({user.username}) - –ø—Ä–∏–≥–ª–∞—Å–∏–ª(–∞) <b>{len(user.invited_users)}</b> —á–µ–ª."
                )

            text = "<b>üó£Ô∏è –¢–æ–ø-5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–ø–æ –∫–æ–ª-–≤—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö)</b>\n\n" + "\n".join(referrer_lines)

        else:
            text = "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."

        await call.message.edit_text(text, reply_markup=back_to_admin_panel_button())