import asyncio
from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.bot.keyboards.inlines import broadcast_confirmation_buttons
from app.bot.utils.statesforms import StepForm
from app.logger import logger
from app.services.user_service import user_service
from database.models import User
from database.session import get_session

router = Router(name=__name__)


async def _send_broadcast_task(bot: Bot, original_message: Message, user_ids: list[int], admin_id: int):
    """–ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    success_count, failed_count = 0, 0
    user_ids_to_send = [uid for uid in user_ids if uid != admin_id]

    for user_id in user_ids_to_send:
        try:
            await original_message.send_copy(chat_id=user_id)
            success_count += 1
            await asyncio.sleep(0.05)  # –ó–∞—â–∏—Ç–∞ –æ—Ç Flood Limits
        except Exception as e:
            failed_count += 1
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            if "Too Many Requests" in str(e):
                await asyncio.sleep(1.5)

    report_text = (
        "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
    )
    try:
        await bot.send_message(admin_id, report_text)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")


@router.message(Command("broadcast"))
async def broadcast_command(message: Message, state: FSMContext):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_db = await user_service.register_or_update_user(message)
    if not user_db.is_admin:
        return

    await message.answer(
        "üì¢ <b>–†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. "
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–µ–¥–∏–∞."
    )
    await state.set_state(StepForm.WAITING_BROADCAST_MESSAGE)


@router.message(StepForm.WAITING_BROADCAST_MESSAGE)
async def receive_broadcast_message(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    await state.update_data(broadcast_message=message)
    await message.reply(
        text="‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=broadcast_confirmation_buttons()
    )
    await state.set_state(StepForm.CONFIRM_BROADCAST)


@router.callback_query(F.data.startswith("broadcast:"), StepForm.CONFIRM_BROADCAST)
async def confirm_broadcast_handler(call: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É —Ä–∞—Å—Å—ã–ª–∫–∏."""
    action = call.data.split(":")[1]

    if action == "start":
        data = await state.get_data()
        original_message: Message = data.get("broadcast_message")

        if not original_message:
            await call.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            await state.clear()
            return

        async with get_session() as session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö ID
            user_ids = await User.get_all_telegram_ids(session)

        admin_id = call.from_user.id

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(_send_broadcast_task(bot, original_message, user_ids, admin_id))

        await call.message.edit_text("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –û—Ç—á—ë—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.")

    elif action == "cancel":
        await call.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await state.clear()