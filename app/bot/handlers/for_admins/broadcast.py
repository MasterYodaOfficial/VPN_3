from aiogram.types import Message, CallbackQuery
from aiogram import Bot
from aiogram.fsm.context import FSMContext
import asyncio
from app.bot.utils.admin_messages import broadcast_start_message
from app.bot.utils.statesforms import StepForm
from app.bot.keyboards.inlines import broadcast_confirmation_buttons
from app.services.user_service import register_user_service
from database.crud.crud_user import get_all_telegram_ids
from database.session import get_session
from app.logger import logger


async def send_broadcast_task(bot: Bot, original_message: Message, user_ids: list[int], admin_id: int):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    success_count, failed_count = 0, 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –∞–¥–º–∏–Ω–∞
    user_ids_to_send = [uid for uid in user_ids if uid != admin_id]

    for user_id in user_ids_to_send:
        try:
            await original_message.send_copy(chat_id=user_id)
            success_count += 1
            await asyncio.sleep(0.05)  # –ü–∞—É–∑–∞ 50–º—Å –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç Flood Limits
        except Exception as e:
            failed_count += 1
            logger.bind(source="bot").warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            if "Too Many Requests" in str(e):
                await asyncio.sleep(1.5)  # –ï—Å–ª–∏ –ª–æ–≤–∏–º —Ñ–ª—É–¥, –∂–¥–µ–º –ø–æ–¥–æ–ª—å—à–µ

    report_text = (
        "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –∞–¥–º–∏–Ω–∞): {len(user_ids_to_send)}"
    )

    try:
        await bot.send_message(admin_id, report_text)
    except Exception as e:
        logger.bind(source="bot").error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")


async def broadcast_command(message: Message, state: FSMContext):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏. /broadcast
    """
    user_db = await register_user_service(message)
    if not user_db.is_admin:
        logger.bind(source="bot").warning(f"{message.from_user.id}, {message.from_user.first_name} –Ω–µ—Ç –∞–¥–º–∏–Ω–∫–∏ –∏–≥–Ω–æ—Ä")
        await state.clear()
        return

    await message.answer(broadcast_start_message)
    await state.set_state(StepForm.WAITING_BROADCAST_MESSAGE)


async def receive_broadcast_message(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    await state.update_data(broadcast_message=message)
    await message.reply(
        text="‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –í–æ—Ç –∫–∞–∫ –æ–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å. –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=broadcast_confirmation_buttons()
    )
    await state.set_state(StepForm.CONFIRM_BROADCAST)


async def confirm_broadcast_handler(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    action = call.data.split(":")[1]

    if action == "start":
        data = await state.get_data()
        original_message: Message = data.get("broadcast_message")

        if not original_message:
            await call.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        async with get_session() as session:
            user_ids = await get_all_telegram_ids(session)

        admin_id = call.from_user.id

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        asyncio.create_task(send_broadcast_task(call.bot, original_message, user_ids, admin_id))

        await call.message.edit_text("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –û—Ç—á—ë—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

    elif action == "cancel":
        await call.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await state.clear()